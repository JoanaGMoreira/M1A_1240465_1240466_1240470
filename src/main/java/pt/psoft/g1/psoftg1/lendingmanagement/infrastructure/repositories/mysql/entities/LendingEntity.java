package pt.psoft.g1.psoftg1.lendingmanagement.infrastructure.repositories.mysql.entities;

import jakarta.persistence.*;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Size;
import lombok.Getter;
import lombok.Setter;
import pt.psoft.g1.psoftg1.bookmanagement.infrastructure.repositories.mysql.BookEntity;
import pt.psoft.g1.psoftg1.readermanagement.infraestructure.repositories.mysql.entities.ReaderDetailsEntity;

import java.time.LocalDate;

@Getter
@Setter
@Entity
@Table(name = "lending", uniqueConstraints = {
        @UniqueConstraint(columnNames = {"LENDING_NUMBER"})
})
public class LendingEntity {

    /**
     * Database primary key. Since this field is autogenerated by the database there
     * is not setId() method.
     * <p>
     * Since this field is an implementation detail that does not matter to the
     * domain, there is no getId() nor setId() method as this field must not be
     * exposed.
     * @author pgsousa
     */
    @Id
    @GeneratedValue(strategy = GenerationType.AUTO)
    private Long pk;

    /**
     * Natural key, which is not in use as it has its own business rules.
     * <p>
     * Composed of {@code int year}, {@code int sequencial} and {@code String lendingNumber}. The string is
     * constructed based on the values of {@code year} and {@code sequencial}.
     */
    private LendingNumberEntity lendingNumber;

    /**
     * {@code Book} associated with this {@code Lending}.
     * */
    @NotNull
    @Getter
    @ManyToOne(fetch=FetchType.EAGER, optional = false)
    private BookEntity book;

    /**
     * {@code Reader} associated with this {@code Lending}.
     **/
    @NotNull
    @Getter
    @ManyToOne(fetch=FetchType.EAGER, optional = false)
    private ReaderDetailsEntity readerDetails;

    /**
     * Date of this {@code Lending}'s creation.
     * */
    @NotNull
    @Column(nullable = false, updatable = false)
    @Temporal(TemporalType.DATE)
    @Getter
    private LocalDate startDate;

    /**
     * Date this {@code Lending} is to be returned.
     * */
    @NotNull
    @Column(nullable = false)
    @Temporal(TemporalType.DATE)
    @Getter
    private LocalDate limitDate;

    /**
     * Date this {@code Lending} is actually returned. This field is initialized as {@code null}
     * as the lending can never begin with the book already returned. The {@code null} value is used to
     * check if a book has been returned.
     * */
    @Temporal(TemporalType.DATE)
    @Getter
    private LocalDate returnedDate;

    // optimistic-lock
    /**
     * Version of the object, to handle concurrency of accesses.
     * */
    @Version
    @Getter
    private long version;

    /**
     * Optional commentary written by a reader when the book is returned.
     * This field is initialized as null as the lending can never begin with the book already returned
     * */
    @Size(min = 0, max = 1024)
    @Column(length = 1024)
    private String commentary = null;

    private int fineValuePerDayInCents;

    /**
     * Constructs a new {@code Lending} object to be persisted in the database.
     * <p>
     * Sets {@code startDate} as the current date, and {@code limitDate} as the current date plus the
     * business specified number of days a reader can take to return the book ({@link Lending#MAX_DAYS_PER_LENDING}).
     *
     * @param       book {@code Book} object, which should be retrieved from the database.
     * @param       readerDetails {@code Reader} object, which should be retrieved from the database.
     * @param       seq sequential number, which should be obtained from the year's count on the database.
     * @throws      NullPointerException if any of the arguments is {@code null}
     * */

    // Constructor
    public LendingEntity() {}

}
